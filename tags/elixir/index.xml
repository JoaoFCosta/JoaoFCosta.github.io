<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on dino (dot) codes</title>
    <link>https://dino.codes/tags/elixir/</link>
    <description>Recent content in Elixir on dino (dot) codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Mar 2020 19:14:45 +0000</lastBuildDate>
    
	<atom:link href="https://dino.codes/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tail Call Optimization in Elixir</title>
      <link>https://dino.codes/posts/tail-call-optimization-in-elixir/</link>
      <pubDate>Mon, 09 Mar 2020 19:14:45 +0000</pubDate>
      
      <guid>https://dino.codes/posts/tail-call-optimization-in-elixir/</guid>
      <description>Lately I&amp;rsquo;ve been trying to review some Software Engineering concepts that are widely talked about on a day to day basis, that I may have learned about at university, but that I ended up forgetting.
One of those concepts is Tail Call Optimization. In short, Tail Call Optimization allows you to reduce the number of stack frames your program needs to maintain, in the call stack, for a tail recursive function, i.</description>
    </item>
    
    <item>
      <title>Elixir Findings: Asynchronous Task Streams</title>
      <link>https://dino.codes/posts/elixir-findings-asynchronous-task-streams/</link>
      <pubDate>Wed, 24 Jul 2019 09:56:13 +0100</pubDate>
      
      <guid>https://dino.codes/posts/elixir-findings-asynchronous-task-streams/</guid>
      <description>The other day I was solving an Exercism.io exercise that involved calculating the frequency of letters in multiple texts in parallel using only a specific number of &amp;ldquo;workers&amp;rdquo;. This same exercise helped me stumble into Task.async_stream/3 and Task.async_stream/5.
For those unfamiliar with the Task module here&amp;rsquo;s the description you can find on Elixir&amp;rsquo;s documentation:
 Conveniences for spawning and awaiting tasks. Tasks are processes meant to execute one particular action throughout their lifetime, often with little or no communication with other processes.</description>
    </item>
    
  </channel>
</rss>