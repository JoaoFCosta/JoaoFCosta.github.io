<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dino (dot) codes</title>
    <link>http://www.dino.codes/</link>
    <description>Recent content on dino (dot) codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Feb 2020 22:12:15 +0000</lastBuildDate>
    
	<atom:link href="http://www.dino.codes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mocking Asynchronous Functions In Python</title>
      <link>http://www.dino.codes/posts/mocking-asynchronous-functions-python/</link>
      <pubDate>Tue, 18 Feb 2020 22:12:15 +0000</pubDate>
      
      <guid>http://www.dino.codes/posts/mocking-asynchronous-functions-python/</guid>
      <description>Introduction You might have already heard about Python&amp;rsquo;s asyncio module, it allows you to easily run concurrent code using Python. In the last few months I&amp;rsquo;ve worked in some codebases which take advantage of the benefits of asyncio, mainly through their use of aiohttp.
When using asyncio you&amp;rsquo;ll use the async/await keywords to both define and call asynchronous functions. This also means changes in the way you test your code because, unlike ordinary functions, asynchronous functions always return a coroutine object, which needs to be awaited, using the await keyword in order to actually schedule it, run it and get the actual return value.</description>
    </item>
    
    <item>
      <title>How to make Twitter preview your website links</title>
      <link>http://www.dino.codes/posts/creating-twitter-cards/</link>
      <pubDate>Tue, 07 Jan 2020 16:19:41 +0000</pubDate>
      
      <guid>http://www.dino.codes/posts/creating-twitter-cards/</guid>
      <description>If you use Twitter you may have already seen a URL tweeted like this:
However, you&amp;rsquo;ve also probably noticed not every tweet with a URL appears that way. That&amp;rsquo;s because not all websites support Twitter Cards .
In short, Twitter Cards let you display links more richly, by displaying a card with more useful information than a simple URL. And the good news is, if you&amp;rsquo;re a website owner it&amp;rsquo;s very easy to update your website so that Twitter can display Twitter Cards for your website.</description>
    </item>
    
    <item>
      <title>Python Tuple Syntax Is Confusing</title>
      <link>http://www.dino.codes/posts/python-tuple-syntax-is-confusing/</link>
      <pubDate>Mon, 23 Dec 2019 12:41:57 +0000</pubDate>
      
      <guid>http://www.dino.codes/posts/python-tuple-syntax-is-confusing/</guid>
      <description>Creating a list or a set with only one element, in Python, is pretty straight forward:
# one element list. [&amp;#34;this is a list&amp;#34;] # one element set. {&amp;#34;this is a set&amp;#34;} However, that&amp;rsquo;s not the case if you want to create a tuple with only one element:
(&amp;#34;sorry! this is not a tuple&amp;#34;) Yup, unfortunately the way you create a one element tuple does not conform with the rest of the data structures in Python which you can create using &amp;ldquo;special&amp;rdquo; characters.</description>
    </item>
    
    <item>
      <title>Elixir Findings: Asynchronous Task Streams</title>
      <link>http://www.dino.codes/posts/elixir-findings-asynchronous-task-streams/</link>
      <pubDate>Wed, 24 Jul 2019 09:56:13 +0100</pubDate>
      
      <guid>http://www.dino.codes/posts/elixir-findings-asynchronous-task-streams/</guid>
      <description>The other day I was solving an Exercism.io exercise that involved calculating the frequency of letters in multiple texts in parallel using only a specific number of &amp;ldquo;workers&amp;rdquo;. This same exercise helped me stumble into Task.async_stream/3 and Task.async_stream/5.
For those unfamiliar with the Task module here&amp;rsquo;s the description you can find on Elixir&amp;rsquo;s documentation:
 Conveniences for spawning and awaiting tasks. Tasks are processes meant to execute one particular action throughout their lifetime, often with little or no communication with other processes.</description>
    </item>
    
  </channel>
</rss>